// C/C++ code for Maximum size square sub-matrix with all 1s
#include<bits/stdc++.h>
using namespace std;

#define R 6
#define C 5

int minimum(int a, int b, int c)
{
    return min(a,min(b,c));
}

void printMaxSubSquare(int ar[R][C])
{
    int i,j;
    int dp[R][C];
    int highest;

    /* Set first column of dp[][]*/
    for(i = 0; i < R; i++)
        dp[i][0] = ar[i][0];

    /* Set first row of dp[][]*/
    for(j = 0; j < C; j++)
        dp[0][j] = ar[0][j];

    /* Construct other entries of dp[][]*/
    for(i = 1; i < R; i++)
    {
        for(j = 1; j < C; j++)
        {
            if(ar[i][j] == 1)
                dp[i][j] = minimum(dp[i][j-1], dp[i-1][j], dp[i-1][j-1]) + 1;
            else
                dp[i][j] = 0;
        }
    }

    /* Find the maximum entry,and indexes of maximum entry
    	in dp[][] */
    highest = dp[0][0];
    //max_i = 0;
    //max_j = 0;
    for(i = 0; i < R; i++)
    {
        for(j = 0; j < C; j++)
        {
            if(highest < dp[i][j])
            {
                highest = dp[i][j];
            }
        }
    }

    printf("Maximum size sub-matrix is: \n");
    for(i=0; i<highest; i++)
    {
        for(j=0; j<highest; j++)
        {
            cout<<"1 ";
        }
        cout<<endl;
    }
}



/* Driver function to test above functions */
int main()
{
    int in[R][C] =
    {
        {0, 1, 1, 0, 1},
        {1, 1, 0, 1, 0},
        {0, 1, 1, 1, 0},
        {1, 1, 1, 1, 0},
        {1, 1, 1, 1, 1},
        {0, 0, 0, 0, 0}
    };

    printMaxSubSquare(in);
}
